{"ast":null,"code":"import _regeneratorRuntime from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethereum browser detected! You can check out Metamesk!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, _Web, tether, tetherBalance, rdwData, _Web2, rwd, rwdBalance, decentralBankData, _Web3, decentralBank, stakingBalance;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // Load Tether Contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                _Web = require('web3');\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                }); //console.log({balance: tetherBalance})\n\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert('Error! Tether contract not deployed - no detected network!'); // to check the thether balance run truffle migrate --reset, after that check inspect (console.log)\n                // academy.consensys.net/ondemand \n\n              case 20:\n                // Load RWD Contract\n                rdwData = RWD.networks[networkId];\n\n                if (!rdwData) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                _Web2 = require('web3');\n                rwd = new web3.eth.Contract(RWD.abi, rdwData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 27;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 27:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                }); //console.log({balance: rwdBalance})\n\n                _context3.next = 32;\n                break;\n\n              case 31:\n                window.alert('RWD Token not deployed - no detected network!'); // to check the thether balance run truffle migrate --reset, after that check inspect (console.log)\n                // academy.consensys.net/ondemand \n\n              case 32:\n                // Load DecentralBank Contract\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 43;\n                  break;\n                }\n\n                _Web3 = require('web3');\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 39;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 39:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                }); //console.log({balance: stakingBalance})\n\n                _context3.next = 44;\n                break;\n\n              case 43:\n                window.alert('Decentral Bank not deployed - no detected network!'); // to check the thether balance run truffle migrate --reset, after that check inspect (console.log)\n                // academy.consensys.net/ondemand \n\n              case 44:\n                this.setState({\n                  loading: false\n                });\n\n              case 45:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // staking function\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.unstakeTokens = function () {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.decentralBank.methods.unstakeTokens().send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rdw: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 5\n          }\n        }, \"LOADING PLEASE...\") : content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rwdBalance: this.state.rwdBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 5\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component); // const App = () => {\n//   return(\n//     <div>\n//       <h1>Hello, world</h1>\n//     </div>\n//   )\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","require","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rdwData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","props","stakeTokens","amount","approve","_address","send","from","on","hash","depositTokens","unstakeTokens","rdw","content","margin","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Navbar from './Navbar';\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json'\nimport RWD from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\nimport Main from './Main'\n\n\nclass App extends Component {\n\n  async UNSAFE_componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if(window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    } else if(window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n    } else {\n          window.alert('No ethereum browser detected! You can check out Metamesk!')\n    }\n  }\n\n  async loadBlockchainData() {\n      const web3 = window.web3\n      const account = await web3.eth.getAccounts()\n      this.setState({account: account[0]})\n      const networkId = await web3.eth.net.getId()\n     \n      // Load Tether Contract\n      const tetherData = Tether.networks[networkId]\n      if(tetherData) {\n        const Web3 = require('web3');\n        const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\n        this.setState({tether})\n        let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n        this.setState({tetherBalance: tetherBalance.toString() })\n        //console.log({balance: tetherBalance})\n      } else {\n          window.alert('Error! Tether contract not deployed - no detected network!')\n          // to check the thether balance run truffle migrate --reset, after that check inspect (console.log)\n          // academy.consensys.net/ondemand \n      } \n   \n        // Load RWD Contract\n      const rdwData = RWD.networks[networkId]\n      if(rdwData) {\n        const Web3 = require('web3');\n        const rwd = new web3.eth.Contract(RWD.abi, rdwData.address)\n        this.setState({rwd})\n        let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\n        this.setState({rwdBalance: rwdBalance.toString() })\n        //console.log({balance: rwdBalance})\n      } else {\n            window.alert('RWD Token not deployed - no detected network!')\n            // to check the thether balance run truffle migrate --reset, after that check inspect (console.log)\n            // academy.consensys.net/ondemand \n      } \n\n      // Load DecentralBank Contract\n      const decentralBankData = DecentralBank.networks[networkId]\n      if(decentralBankData) {\n        const Web3 = require('web3');\n        const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\n        this.setState({decentralBank})\n        let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\n        this.setState({stakingBalance: stakingBalance.toString() })\n        //console.log({balance: stakingBalance})\n      } else {\n            window.alert('Decentral Bank not deployed - no detected network!')\n            // to check the thether balance run truffle migrate --reset, after that check inspect (console.log)\n            // academy.consensys.net/ondemand \n      } \n        this.setState({loading: false})\n  }\n\n  // staking function\n  stakeTokens = (amount) => {\n    this.setState({loading: true})\n    this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n    this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n      this.setState({loading: false})\n    })  \n  })\n  }\n\n   // unstaking function\n   unstakeTokens = () => {\n    this.setState({loading: true})  \n    this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('transactionHash', (hash) => {\n      this.setState({loading: false})\n    })  \n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      tether: {},\n      rdw: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    }\n  }\n\n  render() {\n    let content\n    {this.state.loading ? content = \n    <p id='loader' className='text-center' style={{margin: '30px'}}>LOADING PLEASE...</p> : content = \n    <Main \n    tetherBalance={this.state.tetherBalance}\n    rwdBalance={this.state.rwdBalance}\n    stakingBalance={this.state.stakingBalance}\n    stakeTokens={this.stakeTokens}\n    />}\n    return(\n      <div>\n        <Navbar account={this.state.account}/>\n        <div className='container-fluid mt-5'>\n          <div className='row'>\n            <main role='main' className='col-lg-12 ml-auto mr-auto' style={{maxWidth: '600px', minHeight: '100vm'}} >\n              <div>\n                {content}\n              </div>\n            </main>\n          </div>       \n        </div>\n      </div>\n    )\n  }\n}\n\n// const App = () => {\n//   return(\n//     <div>\n//       <h1>Hello, world</h1>\n//     </div>\n//   )\n// }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}