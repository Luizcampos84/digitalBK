{"ast":null,"code":"import _regeneratorRuntime from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethereum browser detected! You can check out Metamesk!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, _Web, tether, tetherBalance;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // Load Tether Contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                _Web = require('web3');\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log({\n                  balance: tetherBalance\n                });\n                _context3.next = 21;\n                break;\n\n              case 20:\n                window.alert('Error! Tether contract not deployed - no detected network!'); // to check the thether balance run truffle migrate --reset, after that check inspect (console.log)\n                // academy.consensys.net/ondemand \n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rdw: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(Component); // const App = () => {\n//   return(\n//     <div>\n//       <h1>Hello, world</h1>\n//     </div>\n//   )\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/Users/luizantoniodecampos/Desktop/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","require","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","console","log","balance","props","rdw","decentralBank","rwdBalance","stakingBalance","loading"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Navbar from './Navbar';\nimport './App.css';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json'\n\nclass App extends Component {\n\n  async UNSAFE_componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if(window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    } else if(window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n    } else {\n          window.alert('No ethereum browser detected! You can check out Metamesk!')\n    }\n  }\n\n  async loadBlockchainData() {\n      const web3 = window.web3\n      const account = await web3.eth.getAccounts()\n      this.setState({account: account[0]})\n      const networkId = await web3.eth.net.getId()\n     \n      // Load Tether Contract\n      const tetherData = Tether.networks[networkId]\n      if(tetherData) {\n        const Web3 = require('web3');\n        const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\n        this.setState({tether})\n        let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n        this.setState({tetherBalance: tetherBalance.toString() })\n        console.log({balance: tetherBalance})\n      } else {\n          window.alert('Error! Tether contract not deployed - no detected network!')\n          // to check the thether balance run truffle migrate --reset, after that check inspect (console.log)\n          // academy.consensys.net/ondemand \n      }     \n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      tether: {},\n      rdw: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <Navbar account={this.state.account}/>\n        <div className='text-center'>\n          <h1></h1>\n        </div>\n      </div>\n    )\n  }\n}\n\n// const App = () => {\n//   return(\n//     <div>\n//       <h1>Hello, world</h1>\n//     </div>\n//   )\n// }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}